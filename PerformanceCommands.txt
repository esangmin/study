○ lsof
 - "list open files"
 - lsof -p PID

○ pidstat
 - be used to monitor tasks managed by the Linux kernel.
 - pidstat -p 4362 -d 5

○ top
 - show you CPU utilization, process details, a number of tasks, memory utilization, a number of zombie processes, etc.

○ ps
 - ps -ef|grep nginx

○ tcpdump
 - use tcpdump to capture the network packets on a network interface.
 - tcpdump -i eth0 -w /tmp/capture
 - tcpdump –r filename

○ iostat
 - input-output statistics
 - iostat -d
 - iostat -c

○ ldd
 - ist dynamic dependencies 


○ netstat
 - network statistics
 - netstat -s | grep error
 - netstat -r

○ free
 - memory
 - free -g

○ sar
 - system activity report
 - sar  (cpu)
 - sar 3 2
 - sar -r (memory)
 - sar -n ALL (network)

○ ipcs
 - interprocess communication system
 - ipcs -u


○ 기타
 - fdisk -l
 - df -Tlh
 - iotop
 - 


○ Netdata
 - Disk Read
 - Disk Write
 - CPU 사용률
 - Net Inbound
 - Net Outbound
 - Used RAM

○ Amplify



○ 리눅스 서버 60초안에 상황파악하기
 - $ uptime
 - $ dmesg | tail
 - $ vmstat 1
 - $ mpstat -P ALL 1
 - $ pidstat 1
 - $ iostat -xz 1
 - $ free -m
 - $ sar -n DEV 1
 - $ sar -n TCP,ETCP 1
 - $ top

 ※ https://b.luavis.kr/server/linux-performance-analysis

○ uptime
uptime은 현재 대기중인 프로세스가 얼마나 있는지를 나타내는 load average값을 확인하는 가장 쉬운 방법이다. 리눅스 시스템에서 이 값은 대기 중인 프로세스뿐만 아니라 disk I/O와 같은 I/O작업으로 block된 프로세스까지 포함되어 있다. 이를 통해서 얼마나 많은 리소스가 사용되고 있는지 확인할수 있지만, 정확하게 이해할 수는 없다.

위에 있는 3개의 숫자는 각각 1분, 5분, 15분에 load average 값이다. 이를 통해서 시간의 변화를 알 수 있는데, 예를들어서 장애가 발생했다는 소식을 듣고 해당 instance에 로그인 했을때 1분 동안의 값이 15분 값에 비해서 작다면 이는 장애가 발생하고선 내가 너무 뒤늦게 로그인했음을 알 수 있다. 위 예제에서는 1분 값이 약 30이고 15분 값이 19정도 되는것으로 볼때 최근에 상승한것을 알 수 있다. 여기서 숫자가 이 만큼 높은 것은 많은 의미를 갖고 있다. 아마도 CPU 수요에 문제가 있을거라 추측되지만 이 의미를 확인하기 위해선 뒤에 나오는 vmstat이나 mpstat같은 커맨드를 이용해서 확인할 수 있다.

○ vmstat  1
 - r: CPU에서 동작중인 프로세스의 숫자입니다. CPU 자원이 포화(saturation)가 발생하는지 확인할때에 좋은 값입니다. . r 값이 CPU의 값보다 큰 경우에 포화되어 있다고 해석된다.
 - free: free memory를 kb단위로 나타냅니다. free memory가 너무 자리수가 많은 경우 free -m를 이용하면 조금더 편하게 확인할 수 있다.
 - si, so: swap-in과 swap-out에 대한 값입니다. 0이 아니라면 현재 시스템에 메모리가 부족한것이다.
 - us, sy, id, wa, st: 모든 CPU의 평균적인 CPU time을 측정할 수 있다. 각각 user time, 커널에서 사용되는 system time, idle, wait I/O 그리고 stolen time순이다(stolen time은 hypervisor가 가상 CPU를 서비스 하는 동안 실제 CPU를 차지한 시간을 이야기한다.).

○ pidstat 1
 - %CPU 항목은 모든 CPU의 전체 사용량을 이야기한다. 따라서 1591%를 사용중인 java process들은 16CPU 가까이 사용중임을 나타내는것

○ iostat -xz 1
 - r/s, w/s rkB/s, wkB/s: read 요청과 write 요청, read kB/s, write kB/s를 나타낸다. 어떤 요청이 가장 많이 들어오는지 확인해볼 수 있는 중요한 지표다. 성능 문제는 생각보다 과도한 요청때문에 발생하는 경우도 있기 때문이다.
 - await: I/O처리 평균 시간을 밀리초로 표현한 값이다. application한테는 I/O요청을 queue하고 서비스를 받는데 걸리는 시간이기 때문에 application이 이 시간동안 대기하게 된다. 일반적인 장치의 요청 처리 시간보다 긴 경우에는 블럭장치 자체의 문제가 있거나 장치가 포화된 상태임을 알 수 있다.

○ free -m
확인해봐야할 항목

buffers: Block 장치 I/O의 buffer 캐시, 사용량
cached: 파일 시스템에서 사용되는 page cache의 양
위 값들이 0에 가까워 지면 안된다. 이는 곧 높은 Disk I/O가 발생하고 있음을 의미한다(iostat으로 확인 가능). 위 예제는 각각 59MB, 541MB로 괜찮은 정도에 속한다.

““-/+ buffers/cache”는 사용중인 메모리와 여유 메모리의 양을 나타낸다. 리눅스는 빠르게 다시 애플리케이션에 메모리가 할당될 수 있도록 캐시메모리를 사용한다. 따라서 캐시 메모리도 여유 메모리에 포함되어 보여야한다. 캐시메모리 또한 여유메모리로 계산하지 않는 착각으로 인해서 linuxatemyram란 사이트까지 있다.

○ sar -n DEV 1

○ top
 - Ctrl+S는 업데이트를 중지시키고, Ctrl+Q는 다시 시작
 - Shift + F : Fields Management 모드로 전환 하며, 방향키로 항목을 선택 후 "r"을 선택하면 정렬을 해주며, "스페이스바"를 선택하면 항목을 넣고 뺄 수 있습니다.
 - d : Delay 주기 설정해주는 방법으로 기본으로는 3.5초로 주기로 모니터링을 하는데 경우에 따라서 설정을 바꾸고 싶을 때 유용 합니다.

○ 실시간 프로세스 점검 및 시스템 자원 모니터링 
 - 참조: https://estenpark.tistory.com/373

 - # ps -eo user,pid,ppid,rss,size,vsize,pmem,pcpu,time,comm --sort -pcpu |head -11
 - # ps -eo user,pid,ppid,rss,size,vsize,pmem,pcpu,time,comm --sort -pmem |head -11
 - # cat /proc/2176/status
 - # strace -p 1731
 - # lsof -p 1731, lsof -i:22, lsof -i tcp
 - # sar 1 3, sar -r
 - # mpstat -P ALL 1
 - # pidstat 1
 - # iostat -xz 1
 - # multitail messages lastlog maillog, multitail -l "ping localhost" -l "ping 192.168.5.1"
 


○ Java 시스템 모니터링 API
 - 참조: https://vmpo.tistory.com/70
 - 참조: https://qastack.kr/programming/47177/how-do-i-monitor-the-computers-cpu-memory-and-disk-usage-in-java

 - com.sun.management.OperatingSystemMXBean(X)
 - java.lang.management.OperatingSystemMXBean(X)
 - SIGAR API
 - JMX
