○ 개요
 - Maven 프로젝트 시에 Maven central repository에서 제공하는 다양한 장점에도 불구하고 사용성 측면에서
   내부 repository manager의 사용을 권고하고 있음
 - 실제 기업 또는 조직에서는 하나 이상의 central repository를 제공하고 있으며 Nexus는 이런 여러 개의 
   외부 리포지토리를 Proxy 개념으로 연결해서 효율적으로 내부 개발자들에게 virtual한 하나의 repository 
   연결 포인트를 제공함
 - 실제 내부 개발자들은 Nexus 리포지토리만을 바라보고 필요한 artifact들을 요청함

○ Nexus
 - Maven repository manager로 프로젝트 또는 기업에서 필요로 하는 내부 리포지토리 구성을 위한 도구
 - Proxy 적용을 통한 빠른 라이브러리 다운로딩
   . Central 리포지토리에서 직접 다운로딩하는 방식보다 효과적임
 - 공개된 리포지토리에 올릴 수 없는 라이브러리의 효과적인 관리
   . 라이선스 문제로 공개 배포할 수 없는 라이브러리 사용
   . 3rd 파티에서 제공하는 라이브러리
   . 내부 프로젝트 산출물로 생성되는 라이브러리
 - 프로젝트 개발자간의 일관된 라이브러리 사용 관리
   . 프로젝트 내에서 사용되는 라이브러리 버전 관리
   
○ Nexus 특징
 - 직관적이고 뛰어난 사용성의 UI
 - 빠르고 쉬운 설치 - war 파일 형태의 배포 파일
 - artifact들에 대한 index 기능 및 효과적인 search 기능
 - m2eclipse와의 연동 기능
 - 웹 UI를 통한 artifact 등록 및 관리 기능
 
○ 사설 리포지토리가 왜 필요한가?
[기존]
<repositories>
	<!-- 레거시 (현재 MAVEN 지원에 이상이 있는 구 LIB) -->
	<repository>
		<id>legacy-jars</id>
		<name>legacy jars</name>
		<url>file://${project.basedir}/lib</url>
	</repository>
</repositories>
...
<!-- 소스가 file://${project.basedir}/lib/lib-legacy/simplecaptcha/1.2.1/simplecaptcha-1.2.1.jar 에 있는경우. -->
<dependency>
	<groupId>lib-legacy</groupId>
	<artifactId>simplecaptcha</artifactId>
	<version>1.2.1</version>
</dependency>

 - 서버에 파일을 포함해야 함
 - git을 통해 lib를 포함하여 전파해야 함
 - 새로운 서버 세팅시나 was를 업데이트 할 경우에도 실수하기 쉬움

○ 스냅 샷 vs 릴리즈 버전
 - snapshot : 특정 시간에 찍은 소스 코드의 뷰를 나타냄
 - release : 반드시 안정적이거나 완전한 사용을 위한 준비가 되어 있으며, 안정적이고 최종적인 버전


[기존]
○ Maven 로컬 리포지토리 settings.xml 파일 수정
 - codezen_egov 폴더 아래 repository 폴더를 만들고
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                      http://maven.apache.org/xsd/settings-1.0.0.xsd">

  <localRepository>C://codezen_egov/repository</localRepository>
  <interactiveMode>true</interactiveMode>
  <offline>false</offline>

</settings>

[기존]
○ Eclipse 실행
 - 상단메뉴 Window - Preference - Maven - User Settings
   . 위의 settings.xml 파일 경로를 설정


[신규]
참조 : https://guides.sonatype.com/repo3/quick-start-guides/proxying-maven-and-npm/


○ Maven 로컬 리포지토리 settings.xml 파일 수정

<settings>
  <servers>
    <server>
      <id>nexus</id>                      --> pom.xml의 distributionManagement에 정의된 repository id
      <username>admin</username>          --> nexus에 등록된 id와 패스워드
      <password>**********</password>
    </server>
  </servers>
  <mirrors>
    <mirror>
      <!--This sends everything else to /public -->
      <id>nexus</id>
      <mirrorOf>*</mirrorOf>             --> mirror 대상 repository id
      <url>http://192.168.1.53:8081/repository/maven-public/</url>
    </mirror>
  </mirrors>
  <profiles>
    <profile>
      <id>nexus</id>
      <!--Enable snapshots for the built in central repo to direct -->
      <!--all requests to nexus via the mirror -->
      <repositories>
        <repository>
          <id>central</id>
          <url>http://central</url>
          <releases><enabled>true</enabled></releases>
          <snapshots><enabled>true</enabled></snapshots>
        </repository>
      </repositories>
      <pluginRepositories>
        <pluginRepository>
          <id>central</id>
          <url>http://central</url>
          <releases><enabled>true</enabled></releases>
          <snapshots><enabled>true</enabled></snapshots>
        </pluginRepository>
      </pluginRepositories>
    </profile>
  </profiles>
  <activeProfiles>
    <!--make the profile active all the time -->
    <activeProfile>nexus</activeProfile>
  </activeProfiles>
</settings>

○ Repository 생성 (maven-public 사용할 경우, 생성 불필요)
 - Go to the repository manager user interface.
 - Click Administration in the left navigational menu, then click Repositories.
 - Click Create repository and choose the maven2 (proxy) recipe from the list.
 - Add the following text in the required fields:
   . Name: maven-proxy
   . Remote storage URL: https://repo1.maven.org/maven2
 - Click Create repository to complete the form.
 
○ POM 파일 생성
<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>nexus-proxy</artifactId>
  <version>1.0-SNAPSHOT</version>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.10</version>
    </dependency>
  </dependencies>
</project>

○ Maven build
 - mvn package
 
○ 생성한 패키지 배포 
 - 프로젝트 pom.xml 
  <distributionManagement>  
    <!-- use the following if you're not using a snapshot version. -->  
    <repository>  
      <id>nexus</id>  
      <url>http://192.168.1.53:8081/repository/maven-releases/</url>  
    </repository>  
    <!-- use the following if you ARE using a snapshot version. -->  
    <snapshotRepository>  
      <id>nexus</id>  
      <url>http://192.168.1.53:8081/repository/maven-snapshots/</url>  
    </snapshotRepository>  
  </distributionManagement>
 - pom.xml 파일이 있는 폴더에서
   . mvn deploy 
   
○ NPM 설정
 - Click Administration in the left navigational menu, then click Repositories.
 - Click Create repository and choose npm (proxy) from the list.
 - Add the following text in the required fields:
   . Name: npm-proxy
   . Remote Store URL: https://registry.npmjs.org/
 - From the command-line interface run npm config set registry http://192.168.1.53:8081/repository/npm-proxy/
 - 위에서 만든 Repository를 사용하도록 설정
   . 해시 생성 : echo -n 'admin:비밀번호' | openssl base64
   . .npmrc 파일(c:\Users\사용자이름\.npm) 수정 : _auth=생성된 해시
 - From the command-line interface, create a package.json with the values below:
{
  "name": "sample_project1",
  "version": "0.0.1",
  "description": "Test Project 1",
  "dependencies" : {
    "commonjs" : "0.0.1"
  }
}
 - Run the npm build with the command npm install











  
  
  














 
 
 
 
 
 
 
 
 
 





